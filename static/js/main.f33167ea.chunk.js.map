{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","Object","assign","style","padding","minWidth","children","Ticket","_ref","code","boleto","Boleto","_useState3","useState","_useState4","slicedToArray","percentBarcode","setBarCodeZoom","margin","border","textAlign","bank","prettyAmount","expirationDate","toLocaleDateString","disabled","onClick","width","concat","dangerouslySetInnerHTML","__html","toSVG","barcode","error","color","App","_useState","_useState2","setCode","className","type","height","fontSize","placeholder","onChange","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f33167ea.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './App.css'\r\nimport * as Boleto from 'boleto.js'\r\n\r\nfunction App () {\r\n  const [code, setCode] = useState('')\r\n  return (\r\n    <div className='App'>\r\n      <h1>Boleto.js React Hooks example</h1>\r\n      <input\r\n        type='text'\r\n        style={{\r\n          width: '80%',\r\n          height: '2em',\r\n          textAlign: 'center',\r\n          fontSize: '1em'\r\n        }}\r\n        placeholder='[ Digite o nÃºmero do boleto aqui ]'\r\n        onChange={e => setCode(e.target.value)}\r\n      />\r\n      {code && <Ticket code={code} />}\r\n      <br />\r\n      <code style={{ color: '#999' }}>\r\n        test: 34195000080123320318964221470004584410000002000\r\n      </code>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Button (props) {\r\n  return (\r\n    <button style={{ padding: '5px', minWidth: '40px' }} {...props}>\r\n      {props.children}\r\n    </button>\r\n  )\r\n}\r\n\r\nfunction Ticket ({ code }) {\r\n  try {\r\n    const boleto = new Boleto(code)\r\n    const [percentBarcode, setBarCodeZoom] = useState(100)\r\n\r\n    return (\r\n      <div style={{ padding: '2em', margin: '1em', border: '1px solid black' }}>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td style={{ textAlign: 'right' }}>Banco:</td>\r\n              <td style={{ textAlign: 'left' }}>\r\n                <b>\r\n                  {boleto.bank()}\r\n                </b>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ textAlign: 'right' }}>Valor:</td>\r\n              <td style={{ textAlign: 'left' }}>\r\n                <b>\r\n                  {boleto.prettyAmount()}\r\n                </b>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ textAlign: 'right' }}>Data de validade:</td>\r\n              <td style={{ textAlign: 'left' }}>\r\n                <b>\r\n                  {boleto.expirationDate().toLocaleDateString()}\r\n                </b>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <hr />\r\n        <p>\r\n          Zoom {percentBarcode}%\r\n        </p>\r\n        <Button\r\n          disabled={percentBarcode <= 20}\r\n          onClick={() => setBarCodeZoom(percentBarcode - 5)}\r\n        >\r\n          -\r\n        </Button>\r\n        <Button\r\n          disabled={percentBarcode === 100}\r\n          onClick={() => setBarCodeZoom(100)}\r\n        >\r\n          [ 100% ]\r\n        </Button>\r\n        <Button\r\n          disabled={percentBarcode === 100}\r\n          onClick={() => setBarCodeZoom(percentBarcode + 5)}\r\n        >\r\n          +\r\n        </Button>\r\n        <hr />\r\n        <div\r\n          style={{ width: `${percentBarcode}%` }}\r\n          dangerouslySetInnerHTML={{ __html: boleto.toSVG() }}\r\n        />\r\n        <p>\r\n          {boleto.barcode()}\r\n        </p>\r\n      </div>\r\n    )\r\n  } catch (error) {\r\n    return <p style={{ color: 'red' }}>Invalid bank slip number</p>\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}